CSS Grid and Flexbox: Building Responsive Layouts with Precision

Modern web development relies on CSS Grid and Flexbox for creating flexible, responsive layouts. Understanding both will help you build precise designs for different screen sizes.

1. CSS Grid: The Powerful Layout System
CSS Grid is a **two-dimensional** system for arranging elements in rows and columns.

Basic Grid Layout
```css
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 equal columns */
  grid-template-rows: auto;
  gap: 10px; /* Space between grid items */
}

.item {
  background: lightblue;
  padding: 20px;
  text-align: center;
}
```
```html
<div class="container">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
</div>
```
✔ `display: grid;` activates the grid system.  
✔ `grid-template-columns: repeat(3, 1fr);` creates **three equal columns**.  
✔ `gap: 10px;` adds spacing between items.  

Grid Item Positioning
```css
.item1 {
  grid-column: span 2; /* Item spans two columns */
}
```

---

2. Flexbox: One-Dimensional Layouts
Flexbox is perfect for **aligning** elements horizontally or vertically.

Basic Flexbox Layout
```css
.container {
  display: flex;
  justify-content: space-between; /* Distribute items evenly */
  align-items: center; /* Align items vertically */
}

.item {
  background: lightcoral;
  padding: 20px;
}
```
✔ `display: flex;` enables the flex container.  
✔ `justify-content: space-between;` distributes items evenly.  
✔ `align-items: center;` aligns items vertically.  

---

3. CSS Grid vs. Flexbox: When to Use What?
| Feature          | CSS Grid | Flexbox |
|-----------------|---------|---------|
| Layout Type     | 2D (rows & columns) | 1D (row or column) |
| Best for        | Page structures | Aligning elements |
| Alignment       | Complex positioning | Simple centering |

---

4. Responsive Layout with Grid + Flexbox
```css
.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 10px;
}

.item {
  display: flex;
  justify-content: center;
  align-items: center;
  background: lightgreen;
  height: 100px;
}
```
✔ `repeat(auto-fit, minmax(200px, 1fr));` makes items responsive.  
✔ Flexbox is used **inside** grid items for alignment.  


✅Summary
✔ CSS Grid = Best for full-page layouts with rows & columns.  
✔ Flexbox = Best for aligning elements inside containers.  
✔ Combine both for maximum flexibility.  

