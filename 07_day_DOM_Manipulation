Deep Dive into DOM Manipulation: `createElement`, `removeChild`, and Custom Events

The **Document Object Model (DOM)** allows JavaScript to interact with HTML and manipulate elements dynamically. Let's explore **creating elements**, **removing elements**, and **custom events** in JavaScript.

---

## **1. Creating Elements (`document.createElement`)**
You can create new elements dynamically using `document.createElement()`.

### **Example: Creating and Appending an Element**
```javascript
const newDiv = document.createElement("div"); // Create a new div
newDiv.textContent = "Hello, I am a new div!";
newDiv.classList.add("box"); // Add a class
document.body.appendChild(newDiv); // Append it to the body
```
âœ” `document.createElement("tag")` creates an element.  
âœ” `textContent` sets the inner text.  
âœ” `appendChild()` adds it to the DOM.  

### **Adding Attributes Dynamically**
```javascript
newDiv.setAttribute("id", "newDiv");
newDiv.style.backgroundColor = "lightblue";
```

---

## **2. Removing Elements (`removeChild`)**
You can remove elements dynamically using `removeChild()`.

### **Example: Removing an Element**
```javascript
const parent = document.getElementById("parentDiv");
const child = document.getElementById("childDiv");

if (child) {
  parent.removeChild(child);
}
```
âœ” Always check if the element exists before removing it.  
âœ” `removeChild()` requires a reference to the child element.  

### **Alternative: Using `remove()`**
```javascript
document.getElementById("newDiv").remove();
```
This is a simpler way to remove an element.

---

## **3. Custom Events**
Custom events allow developers to trigger and listen for custom-defined interactions.

### **Example: Creating and Dispatching a Custom Event**
```javascript
const event = new Event("customEvent");

document.addEventListener("customEvent", () => {
  console.log("Custom event triggered!");
});

// Dispatch the event
document.dispatchEvent(event);
```
âœ” `new Event("eventName")` creates an event.  
âœ” `addEventListener("eventName", callback)` listens for it.  
âœ” `dispatchEvent(event)` triggers it.  

### **Example: Custom Event with Data (`CustomEvent`)**
```javascript
const customEvent = new CustomEvent("userLoggedIn", {
  detail: { username: "Ayana" },
});

document.addEventListener("userLoggedIn", (e) => {
  console.log("User Logged In:", e.detail.username);
});

document.dispatchEvent(customEvent);
```
âœ” `CustomEvent` allows passing data using `detail`.  
âœ” Useful for handling complex interactions.  

---

## **4. Combining Everything: Dynamic UI Example**
```javascript
// Create a button dynamically
const btn = document.createElement("button");
btn.textContent = "Click Me!";
document.body.appendChild(btn);

// Add an event listener to remove the button on click
btn.addEventListener("click", () => {
  console.log("Button clicked!");
  btn.remove();
});
```
âœ” Creates a button dynamically.  
âœ” Listens for a click event.  
âœ” Removes itself when clicked.  

---

### âœ… **Summary**
âœ” **`createElement`** dynamically creates HTML elements.  
âœ” **`removeChild` & `remove()`** remove elements from the DOM.  
âœ” **Custom Events** allow defining and handling custom behaviors.  

Would you like to see how this applies to your React Native project? ðŸš€
